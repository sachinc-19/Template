

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define fon(n) for(int i=0;i<n;i++)
#define fo(n) for(int i=1;i<=n;i++)
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define pii pair<int,int>
#define pll pair<ll ,ll>
#define vii vector<int>
#define vll vector<ll>
#define vvll vector<vll>
#define vpii vector<pii>
#define vpll vector<pll>
#define bs binary_search
#define lb lower_bound
#define ub upper_bound
#define M (1000*1000*1000+7)
#define test ll T; cin>>T; while(T--)
#define all(z) z.begin() , z.end()
#define allr(z) z.rbegin() , z.rend()
// =============================================
 
char a[1001][1001];
bool visited[1001][1001];
int d[1001][1001];
int R , C;
int dr[] = {-1 , 0 , 1 , 0};
int dc[] = {0 , 1 , 0 , -1};

// new way to check the boundry conditioon
//bool ok(int r , int c)
//   return !(r<0 || r >= R || c <0 || c >= C);

void dfs(int r , int c)
{
    if(r<0 || r >= R || c <0 || c >= C)
     return ;

    visited[r][c] = 1;
    for(int i = 0 ; i < 4 ; i++)
    {
        int rr = r+dr[i] , cc = c+dc[i]; 

        if(a[rr][cc] == '.' && !visited[rr][cc])
        {
            // a[rr][cc] = '#';
            d[rr][cc] = 1+d[r][c];
            dfs(rr , cc);
            // a[rr][cc] = '.';
        }     
    }
}
pair<int ,pii > solve(int r , int c)
{
    memset(d , 0 , sizeof(d));
    memset(visited , false , sizeof(visited));
    dfs(r , c);
    pair<int , pii> p;
    p.ff = 0;
    for(int i = 0 ; i < R ; i++)
     {
         for(int j = 0; j < C ; j++)
         {
             if(p.ff < d[i][j])
            {
                p.ff = d[i][j];
                p.ss.ff = i;
                p.ss.ss = j;
            }
         }
     }
     return p;
}
int main()
{
   ios_base::sync_with_stdio(false);
   cin.tie(NULL);
   test
   {
     int c , r ;
     cin >> C >> R;

     for(int i = 0 ; i < R ; i++)
     {
        for(int j = 0 ; j < C ; j++)
        cin >> a[i][j] ;
     }
     for(int i = 0 ; i < R ; i++)
     {
        for(int j = 0 ; j < C ; j++)
         if(a[i][j] == '.')
         {
             r = i , c = j;
         }
     }
     
     pair<int, pii> p = solve(r , c);
      p = solve(p.ss.ff , p.ss.ss);

      cout << "Maximum rope length is " << p.ff << "." << endl;
   }
}

THEORY //
DFS (or BFS) can be used for other purposes than just ﬁnding (and counting the number 
of) connected components. Here, we show how a simple tweak of the O(V +E) dfs(u) (we 
can also use bfs(u)) can be used tolabel (also known in CS terminology as ‘to color’) 
and count the size of each component. This variant is more famously known as ‘ﬂood ﬁll’ 
and usually performed on implicit graphs (usually 2D grids).

int dr[] = {1,1,0,-1,-1,-1, 0, 1};     // trick to explore an implicit 2D grid 
int dc[] = {0,1,1, 1, 0,-1,-1,-1}; // S,SE,E,NE,N,NW,W,SW neighbors
int floodfill(int r, int c, char c1, char c2) {    // returns the size of CC 
if (r < 0 || r >= R || c < 0 || c >= C) return 0;   // outside grid 
if (grid[r][c] != c1) return 0;    // does not have color c1 
int ans = 1;              // adds 1 to ans because vertex (r, c) has c1 as its color 
grid[r][c] = c2;         // now recolors vertex (r, c) to c2 to avoid cycling! 
for (int d = 0; d < 8; d++) 
  ans += floodfill(r + dr[d], c + dc[d], c1, c2); 
return ans;            // the code is neat due to dr[] and dc[] 
}