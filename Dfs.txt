// dfs snippet
int n , m;
int dx[] = {-1 , 0 , 1 , 0};
int dy[] = {0 , 1 , 0 , -1};
// new way to check the boundry condition
bool check(int x , int y)
{
  if(x < 0 || x >= n || y < 0 || y >= m)
     return false;
     return true;
}
int dx[] = {1,1,0,-1,-1,-1, 0, 1};     // trick to explore an implicit 2D grid in 8 drs
int dy[] = {0,1,1, 1, 0,-1,-1,-1}; // S,SE,E,NE,N,NW,W,SW neighbors by side(S,E,N,W) and diagonal(SE,NE,NW,SW)
// for 4 Neighbors by side S,E,N,W
int dx[] = {1 , 0 , -1 , 0};
int dy[] = {0 , 1 , 0 , -1};

int n, m, k;
vector<int> g[N];
 
bool read () {
	if (scanf("%d%d%d", &n, &m, &k) != 3)
		return false;
	forn(i, n)
		g[i].clear();
	forn(i, m){
		int v, u;
		scanf("%d%d", &v, &u);
		--v, --u;
		g[v].pb(u);
		g[u].pb(v);
	}
	return true;
}

// good names
vector<int> cyc;
int used[N];
int p[N];
int clr[N];

//**** UNWEIGHTED DFS *********************//
// TIME COMPLEXITY O(V+E)  with adjacency list but with adjacnecy matrix it is O(V^2)
const int MAXN = 100010;
vector<vii> AdjList(MAXN);
bool visited[MAXN];
void dfs(int u)
{
    visited[u] = 1;
    for(int i = 0 ; i < AdjList[u].size() ; i++)
    {
        int v = AdjList[u][i];
        if(!visited[v])
            dfs(v);
    }

}
int main()
{
   ios_base::sync_with_stdio(false);
   cin.tie(NULL);

      int n , e , ans = 1;
      cin >> n >> e;

      for(int i = 0 ; i < e ; i++)
      {
          int u , v ;
          cin >> u >> v;
          AdjList[u].pb(v);
          AdjList[v].pb(u);
      }

     for(int i = 1 ; i <= n ;i++)
     {
         if(!visited[i])
         {
             memset(visited, 0 , sizeof(visited));
             dfs(i);
         }
     }
      cout<< ans << endl;
}
// global variable, initially all values are set to UNVISITED
// DFS for normal usage: as graph traversal algorithm 
// important: we mark this vertex as visited 
// v is a (neighbor, weight) pair 
 // important check to avoid cycle 
// recursively visits unvisited neighbors of vertex u 

//********* WEIGHTED DFS ************// 

bool dfs_num; 

void dfs(int u) { 

    dfs_num[u] = true; 

    for (int j = 0; j < (int)AdjList[u].size(); j++) { 
       ii v = AdjList[u][j]; 
       if (!dfs_num[v.first])
         dfs(v.first);
       } 
} 

// memset(visited , false , sizeof(visited));
// AdjList.clear();
int n , m;
int dx[] = {-1 , 0 , 1 , 0};
int dy[] = {0 , 1 , 0 , -1};
// new way to check the boundry conditioon
bool check(int x , int y)
{
  if(x < 0 || x >= n || y < 0 || y >= m)
     return false;
     return true;
}

THEORY //
DFS (or BFS) can be used for other purposes than just ﬁnding (and counting the number 
of) connected components. Here, we show how a simple tweak of the O(V +E) dfs(u) (we 
can also use bfs(u)) can be used to label (also known in CS terminology as ‘to color’) 
and count the size of each component. This variant is more famously known as ‘ﬂood ﬁll’ 
and usually performed on implicit graphs (usually 2D grids).

int dx[] = {1,1,0,-1,-1,-1, 0, 1};     // trick to explore an implicit 2D grid 
int dy[] = {0,1,1, 1, 0,-1,-1,-1}; // S,SE,E,NE,N,NW,W,SW neighbors

int floodfill(int x, int y, char c1, char c2) {    // returns the size of CC 
if (x < 0 || y < 0 ||  < 0 || c >= C) return 0;   // outside grid 
if (grid[r][c] != c1) return 0;    // does not have color c1 
int ans = 1;              // adds 1 to ans because vertex (r, c) has c1 as its color 
grid[r][c] = c2;         // now recolors vertex (r, c) to c2 to avoid cycling! 
for (int d = 0; d < 8; d++) 
  ans += floodfill(r + dx[d], c + dy[d], c1, c2); 
return ans;            // the code is neat due to dx[] and dy[] 
}

/// ********************* linova kingdom ***********//
diameter of tree ka nya tareka

const int MAXN = 200010;
vector<vii> AdjList(MAXN);
vii d(MAXN , 0) , h(MAXN , 0) ;
vii t(MAXN , 0); 
int n , k;

int dfs(int u , int p)
{  
    d[u] = d[p]+1;
    h[u] = 1;

    for(int i = 0 ; i < AdjList[u].size() ; i++)
    {
        int v = AdjList[u][i];
        if(v != p)
      h[u] += dfs(v , u);
    }

    t[u] = h[u] - d[u];
    return h[u];
}

// ********** min value corresponding to a node in the graph************////

const int MAXN = 100010;

vector<vii> AdjList(MAXN);
bool visited[MAXN];
vii c(MAXN , 0);
int dfs(int u)
{
    visited[u] = 1;
    int mn = c[u];
    for(int i = 0 ; i < AdjList[u].size() ; i++)
    {
        int v = AdjList[u][i];
        if(!visited[v])
          mn = min(mn , dfs(v));
    }
    return mn;

}

// 4.2.5 Topological Sort (Directed Acyclic Graph)
Topological sort (or topological ordering) of a Directed Acyclic Graph (DAG) is a linear ordering of the vertices in the
DAG so that vertex u comes before vertex v if edge (u → v) exists in the DAG. Every DAG has at least one and possibly more
 topological sort(s). One application of topological sorting is to ﬁnd a possible sequence of modules that a University 
 student has to take to fulﬁll graduation requirement. Each module has certain pre-requisites to be met. These 
 pre-requisites are never cyclic, so they can be modeled as a DAG. Topological sorting this module pre-requisites DAG
  gives the student a linear list of modules to be taken one after another without violating the pre-requisites constraints.

vi ts; // global vector to store the toposort in reverse order
void dfs2(int u) { // different function name compared to the original dfs 

dfs_num[u] = VISITED; 
    for (int j = 0; j < (int)AdjList[u].size(); j++) { 
        ii v = AdjList[u][j];
    
         if (dfs_num[v.first] == UNVISITED) 
         dfs2(v.first); 
    } 

    ts.push_back(u); } // that’s it, this is the only change

    // inside int main() 
    ts.clear(); 
    memset(dfs_num, UNVISITED, sizeof(dfs_num)); 
    for (int i = 0; i < V; i++) // this part is the same as finding CCs 
    if (dfs_num[i] == UNVISITED) 
    dfs2(i); 

            // alternative, call: reverse(ts.begin(), ts.end()); first 
    for (int i = (int)ts.size() - 1; i >= 0; i--) // read backwards 
    printf(" %d", ts[i]); 
    printf("\n");

// For the sample graph in Figure 4.4, the output is like this: 
// 7 6 0 1 2 5 3 4 (remember that there can be >= 1 valid toposort)

//4.2.6 Bipartite Graph Check
Bipartite graph has important applications that we will see later in Section 4.7.4. In this subsection, we just want to 
check if a graph is bipartite (or 2/bi-colorable) to solve problems like UVa 10004 - Bicoloring. We can use either BFS 
or DFS for this check, but we feel that BFS is more natural. The modiﬁed BFS code below starts by coloring the source 
vertex (ﬁrst layer) with value 0, color the direct neighbors of the source vertex (second layer) with value 1, color 
the neighbors of direct neighbors (third layer) with value 0 again, and so on, alternating between value 0 and value 1 
as the only two valid colors. If we encounter any violation(s) along the way—an edge with two endpoints having the same
color, then we can conclude that the given input graph is not a bipartite graph.

// inside int main() 
queue<int> q; q.push(s); 
vi color(V, INF); 
color[s] = 0; 
bool isBipartite = true; // addition of one boolean flag, initially true 

 while (!q.empty() & isBipartite) { // similar to the original BFS routine 
  int u = q.front(); q.pop(); 
  for (int j = 0; j < (int)AdjList[u].size(); j++) { 
    ii v = AdjList[u][j]; 
    if (color[v.first] == INF) { // but, instead of recording distance, 
    color[v.first] = 1 - color[u]; // we just record two colors {0, 1} 
    q.push(v.first); } 
    else if (color[v.first] == color[u]) { // u & v.first has same color 
    isBipartite = false; break; } } } // we have a coloring conflict

// connected component ki baat
 with the restriction that a vertex can be in at most as many components as its degree. 



 bool dfs(int u , bool *recStack) {
    vis[u] = 1;
    recStack[u] = 1;

    for(int v : adj_list[u]) {
        if(!vis[v] && dfs(v , recStack)) {
            return true;
        }
        else if(recStack[v]) {
            return true;
        }
    }
    recStack[u] = 0;
    return false;
}

    bool *recStack = new bool[n+1];
    fo(i , n) {
        if(!vis[i] && dfs(i , recStack)) {
            ans++;
        }
    }