// sign of left operand is appended to result in case of modulus operator in C
// Through faster modular exponentiation 
// technique, we can obtain 3^{3n}\ mod\ (10^{9} + 7) and 7^{n}\ mod\ (10^{9} + 7). 
// Subtracting the values and finding the answer mod (10^{9} + 7)answermod(10 9+7) gives the answer. 
// But ans\ mod\ (10^{9} + 7) will not always work. Why? Because the % operator gives the remainder 
// and not the mod value. Both the remainder and mod value remain same for positive numbers, but can break down in case of 
// negative numbers.
// 3^{3n}\ mod\ (10^{9} + 7) - 7^{n}\ mod\ (10^{9} + 7)  (may be negative ??)

// The correct all encapsulating way of the mod operation, for a mod b would be (a%b + b)%b.
int lcm(int a , int b){
    return (a*b)/__gcd(a , b);}

int mod(int x){
    return ((x % M + M) % M);}

int add(int a , int b){
    return mod(mod(a) + mod(b));}

int mul(int a , int b){
    return mod(mod(a) * mod(b));}

int modpower(int x , int n)
{
     int res = 1;
     x = mod(x);
     while(n > 0)
     {
         if(n&1)
         res = mul(res , x);

         x = mul(x , x);
         n >>= 1;
     }
     return res;
}

int modinv(int a){
    return modpower(a , M-2); }


find ncr(n , r)

Time Complexity -> O(r)
Space Complexity -> O(1)
<*************************** Method 1 (using factorial generalized formula *******************>

int C (int n, int r) // r are selected from the group of n
{
    long long  res =1;
    for(long long i=1; i<=r; i++)
    {
        res=(res*(n-r+i))/i;
    }
    return res;
}

Time Complexity -> O(n)
Space Complexity -> O(1)
<*************************** Method 2 (Using factorial function) ******************************>

int fac(int n)
{
    int res = 1;
    while(n > 0)
    {
        res = mul(res , n);
        n--;
    }
    return res;
}

int ncr(int n ,int r)
{
    if(r==0) return 1;
    return mul( mul(fac(n) , modinv(fac(n-r))) , modinv(fac(r)));
}

Time Complexity -> O(n)
Space Complexity -> O(n)
<*************************** Method 3 (By Precalculating factorail) ************************>

int ncrModfermat(int n , int r)
{
    if(r==0)
      return 1;
    int fact[n+1];
    
    fact[0] = 1;

    for(int i = 1 ; i <= n ; i++)
        fact[i] = mul(i , fact[i-1]);
    
    return mul(mul(fact[n] , modinv(fact[n-r])) , modinv(fact[r]));
}

Time Complexity -> O(n)
Space Complexity -> O(n * r)
<*********************************** Method 4 Using DP *******************************>

int C(int n , int r) 
{
    int ncr[n+1][r+1];
    memo(ncr, 0);
    for(int i = 0 ; i <= n; i++)
    {
        ncr[i][0] = 1;
    }
    for(int i = 1 ; i <= n ; i++)
    {
        for(int j = 1 ; j <= i && j <= r ; j++)
        {
            ncr[i][j] = add(ncr[i-1][j] , ncr[i-1][j-1]);
        }
    }
    return ncr[n][r];
}




fon(i , n){
        cin >> a[i];
        if(a[i]==1)
         pos = i;
    }
    bool okl = 1 , okr = 1;
    for(int i = 1 ; i < n ; i++)
    {
        okr &= (a[(pos+i+n)%n] == i+1);
        okl &= (a[(pos-i+n)%n] == i+1);
    }
    if(okl || okr) cout << "YES" << endl;
    else cout << "NO" << endl;


//linear
#include <bits/stdc++.h>
using namespace std;
const int MOD=998244353;
typedef long long int;
int fac[2333],rfac[2333];
int qp(int a,int b)
{
	int x=1; a%=MOD;
	while(b)
	{
		if(b&1) x=x*a%MOD;
		a=a*a%MOD; b>>=1;
	}
	return x;
}
int n,m,k;
int main()
{
	scanf("%d%d%d",&n,&m,&k);
	fac[0]=1;
	for(int i=1;i<=n;++i)
		fac[i]=fac[i-1]*i%MOD;
	rfac[n]=qp(fac[n],MOD-2);
	for(int i=n;i;--i)
		rfac[i-1]=rfac[i]*i%MOD;
	printf("%lld\n",m*qp(m-1,k)%MOD*fac[n-1]%MOD
	*rfac[k]%MOD*rfac[n-1-k]%MOD);
}


If a problem is asking to find the answer modulo something because the answer can 
quite large 
=> most of the times power , factorial , combinatorics 
=> overall => number theory
=> Think how the answer can be large enoough
=> Think in powers of 2 , 10 , .. n;
=> Think of combinatorics type of stuff
=> dp could also be one possible answer but its rare