********************* // SET WITH COMPARATOR FUNCTION // ***********************
struct Edge {
	int a,b;
};

bool cmp(const Edge & x , const Edge & y) { 
    if(x.b - x.a > y.b - y.a){
        return 1;
    }
    else if(x.b - x.a == y.b - y.a){
       return x.a < y.a;
    }
    else return 0;
}

set<Edge ,bool(*)(const Edge & , const Edge &)> s(cmp);

************************** // SET WITH COMPARATOR USING STRUCT // *****************
struct cmp {
	bool operator() (const pair<int, int> &a, const pair<int, int> &b) const {
		int lena = a.second - a.first + 1;
		int lenb = b.second - b.first + 1;
		if (lena == lenb) return a.first < b.first;
		return lena > lenb;
	}
};

set<pair<int, int>, cmp> segs;

// 2 way. using pair instead of struct

bool cmp(const pii & x , const pii & y) { 
    if(x.ss - x.ff > y.ss - y.ff){
        return 1;
    }
    else if(x.ss - x.ff == y.ss - y.ff){
       return x.ff < y.ff;
    }
    else return 0;
}

set<pii ,bool(*)(const pii & , const pii &)> s(cmp);
