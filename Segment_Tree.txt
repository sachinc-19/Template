const int maxn = 1e5;
const int INF = 1e9;
/*
KEYNOTES:
----------------------------------------------
merge(X , identity_element) = X
----------------------------------------------
identity_transformation.combine(X) = X
----------------------------------------------
----------------------------------------------
ALWAYS: older_update.combine(newer_update)
----------------------------------------------
*/

// example: addition: identity element is 0
// a + 0 = 0 +

struct node
{
    int mn = 0; // 1
    // use more variables if you want more information
    // these default values should be identity element
    node(){}
    node(int val){  // we are talking about the leaf
        mn = val; // 2
    }
    void merge(const node &l , const node &r){ // store the thing you wanna query
       mn = l.mn + r.mn;
    //    v = l.v + r.v;  // 3
       // If we wanted the maximum then we would do
       // like v = max(l.v , r.v)
    }
};

// add on a range :identity transformation = 0
// old += new

// If old is identity which is 0 , then 0 += new = new

struct update
{
    int v = 0; //4
    // use more variables if you want more information
    // these default values should be identity transformation
    update(){}
    update(int val){
        v = val; //5
    }
    // combine the current update with the other update
    void combine(update &other , const int32_t &tl , const int32_t &tr)
    {
        v = other.v;  //6
        // you can be sure that the other is newer than current
    }
    // store the correct infromation in the node X
    void apply(node &x , const int32_t &tl , const int32_t &tr)
    {
        x.mn = (tr-tl+1)*v;  //7
        // no change in freq
    }
};

// template<typename node , typename update>
class segtree
{
   private:
   int len;
   vector<node> t;
   vector<update> u;
   vector<bool> lazy;
   node identity_element;
   update identity_transformation;
   void pushdown(const int &v , const int &tl , const int &tr)
   {
       if(lazy[v]) // if it is lazy , propagate it
       {
           lazy[v] = 0;  // not lazy anymore push the update down
           // he was remembering upd[v]
   
           int mid = (tl+tr)/2;
           apply(2*v , tl , mid , u[v]);  // propagate on left child
           apply(2*v+1 , mid+1 , tr , u[v]);  // propagate on right child
           u[v] = identity_transformation; //update done
           // man doesn't remember anything anymore
       }
   }
   void apply(const int32_t &v , const int32_t &tl , const int32_t &tr , update upd) // tl , tr is the node range and v is the node id
   {
       if(tl != tr) // if tl is not a leaf mark it lazy
       {
           lazy[v] = 1;
           u[v].combine(upd , tl , tr);
       }
       upd.apply(t[v] , tl , tr);
   }

   template<typename T>
   void build(const T &arr , const int &v , const int &tl , const int &tr){
       if(tl == tr)
       {
           t[v] = arr[tl];
           return;
       }
       int tm = (tl+tr) >> 1;
       build(arr , v<<1 , tl , tm);
       build(arr , v<<1|1 , tm+1 , tr);
       t[v].merge(t[v<<1] , t[v<<1|1]);
   }
   // pretty much unchanged except for the pushdown
   node query(const int &v , const int &tl , const int &tr , const int &l , const int &r)
   {
       if(tl > r || tr < l){
            return identity_element;
       }
       if(tl >= l && tr <= r){
           return t[v];
       }
       pushdown(v , tl , tr); // we remove lazy tag before going down
       // why? So that the children have correct information
       // previously children have wrong info
   
       int tm = (tl+tr)/2;
       node a = query(2*v , tl , tm , l , r) , b = query(2*v+1 , tm+1 , tr , l , r) , ans;
       ans.merge(a , b);
       return ans;
   }
   // l , r is the update range
   // val is the update value , add this to all the leaaves in the range [l , r]
   // rupd = range update
   void rupd(const int &v , const int &tl ,const int &tr , const int &l ,const int &r ,const update &upd)
   {
       if(tl > r || tr < l){ // no overlap
           return ;
       }
       if(tl >= l && tr <= r){ // fully within
           // ask the man to remember it
           apply(v , tl , tr , upd);
           return;
       }
       // partial overlap
       pushdown(v , tl , tr);// we remove lazy tag before going down
       // why? So that the children have correct information
       // previously children have wrong info
   
       int tm = (tl+tr)/2;
       rupd(2*v , tl , tm , l , r , upd);
       rupd(2*v+1 , tm+1  , tr , l , r , upd);
       t[v].merge(t[2*v] , t[2*v+1]); // store correct value here at this node
   }

   public:
   segtree(int l){
       len = l;
       t.resize(4 * len);
       u.resize(4 * len);
       lazy.resize(4 * len);
       identity_element = node();
       identity_transformation = update();
   };
   template<typename T>
   void build(const T &arr)
   {
       build(arr , 1 , 0 , len-1);
   }
   node query(const int &l , const int &r){
       return query(1 , 0 , len-1 , l , r);
   }
   void rupd(const int &l , const int &r , const update &upd){
       rupd(1 , 0 , len-1 , l , r , upd);
   }
};

int main()
{
   ios_base::sync_with_stdio(false);
   cin.tie(NULL);

   segtree s(1000);  // create a segment tree of length  1000
   vector<int> v(1000);
   s.build(v);
   s.rupd(2 , 5 , 8); // l , r , val
   s.rupd(1 , 3 , -4);
   // printing values from index 0 to 15
   for(int i = 1 ; i < 15 ; i++)
   {
       cout << s.query(i , i).mn << " ";
   }
   cout << endl << s.query(2, 4).mn << " " << s.query(2 , 4).freq;
   return 0;
}

// how to define the behaviour or the nature of the update and queries

// this segment was sum in range and add on range

// let's change it to -> (sum on range) and (set all values on range to certain value)

// let's make one from the question earlier

// get min element and frequency of the min element in the range


const int INF = INT_MAX;

struct node
{
    int mn = 0; // 1
    // use more variables if you want more information
    // these default values should be identity element
    node(){}
    node(int val){  // we are talking about the leaf
        mn = val; // 2
    }
    void merge(const node &l , const node &r){ // store the thing you wanna query
       mn = (l.mn + r.mn);
    }
};

// add on a range :identity transformation = 0
// old += new

// If old is identity which is 0 , then 0 += new = new

// template<typename node , typename update>
struct segtree
{
   int len;
   vector<node> t;
   node identity_element;
   segtree(int l){
       len = l;
       t.resize(4 * len);
       identity_element = node();
   };

   template<typename T>
   void build(const T &arr , const int &v , const int &tl , const int &tr){
       if(tl == tr)
       {
           t[v] = arr[tl];
           return;
       }
       int tm = (tl+tr) >> 1;
       build(arr , v<<1 , tl , tm);
       build(arr , v<<1|1 , tm+1 , tr);
       t[v].merge(t[v<<1] , t[v<<1|1]);
   }
   // pretty much unchanged except for the pushdown
   node query(const int &v , const int &tl , const int &tr , const int &l , const int &r)
   {
       if(tl > r || tr < l){
            return identity_element;
       }
       if(tl >= l && tr <= r){
           return t[v];
       }
   
       int tm = (tl+tr)/2;
       node a = query(2*v , tl , tm , l , r) , b = query(2*v+1 , tm+1 , tr , l , r) , ans;
       ans.merge(a , b);
       return ans;
   }
   void rupd(const int &v , const int &tl ,const int &tr , const int &pos ,const int &new_val)
   {
       if(tl == tr){ // no overlap
           t[v] = new_val ;
       }
       else  {
           int tm = (tl + tr) / 2;
           if (pos <= tm)
               rupd(v*2, tl, tm, pos, new_val);
           else
               rupd(v*2+1, tm+1, tr, pos, new_val);
           t[v].merge(t[v*2] , t[v*2+1]);
       }
   }

   public:
   template<typename T>
   void build(const T &arr)
   {
       build(arr , 1 , 0 , len-1);
   }
   node query(const int &l , const int &r){
       return query(1 , 0 , len-1 , l , r);
   }
   void rupd(const int pos , const int &upd){
       rupd(1 , 0 , len-1 , pos , upd);
   }
};


class SegmentTree
{
private:
    vector<array<ll, 4>> Tree;
    vii A;
    int n;

    void build(int idx, int l, int r)
    {
        if (l == r)
        {
            Tree[idx] = {A[l], A[l], A[l], A[l]};
            return;
        }
        int m = l + (r - l) / 2;
        int left = 2 * idx;
        int right = 2 * idx + 1;
        build(left, l, m);
        build(right, m + 1, r);
        Tree[idx][3] = max(Tree[left][1] + Tree[right][0], max(Tree[left][3], Tree[right][3]));
        Tree[idx][2] = Tree[left][3] + Tree[right][3];
        Tree[idx][1] = max(Tree[right][1], Tree[left][1] + Tree[right][2]);
        Tree[idx][0] = max(Tree[left][0], Tree[right][0] + Tree[left][2]);
    }

    array<ll, 4> query(int idx, int l, int r, int ql, int qr)
    {
        if ((r < ql || l > qr))
        {
            return {0, 0, 0, -15008};
        }
        else if (ql <= l && r <= qr)
        {
            return Tree[idx];
        }
        int m = l + (r - l) / 2;
        auto ansl = query(2 * idx, l, m, ql, qr);
        auto ansr = query(2 * idx + 1, m + 1, r, ql, qr);
        array<ll, 4> ans;
        if (ansl[3] == -15008)
        {
            ans = ansr;
        }
        else if (ansr[3] == -15008)
        {
            ans = ansl;
        }
        else
        {
            ans[3] = max(ansl[1] + ansr[0], max(ansl[3], ansr[3]));
            ans[2] = ansl[2] + ansr[2];
            ans[1] = max(ansr[1], ansr[2] + ansl[1]); // (suffSumR , SumR + suffSuml)
            ans[0] = max(ansl[0], ansl[2] + ansr[0]); // (prefixSumL , SumL + prefixSumR)
        }
        return ans;
    }

public:
    // SegmentTree(int sz) : n(sz), Tree(4*n){}
    SegmentTree(int sz)
    {
        n = sz;
        Tree.resize(4 * n);
    }

    SegmentTree(const vii &initialA) : SegmentTree((int)initialA.size())
    {
        A = initialA;
        build(1, 0, n - 1);
    }
    array<ll, 4> query(int ql, int qr)
    {
        return query(1, 0, n - 1, ql, qr);
    }
};

void solve()
{
    int n;
    cin >> n;
    vii a(n);

    fon(i, n) cin >> a[i];
    SegmentTree st(a);

    int Q;
    cin >> Q;
    while (Q--)
    {
        int l, r;
        cin >> l >> r;
        cout << st.query(l - 1, r - 1)[3] << endl;
    }
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
}



template<typename NODE,typename UPDATE>
struct segtree{ 
	bool built=false,lazy[4*maxn];
	NODE zero=NODE(),t[4*maxn];
	UPDATE noop=UPDATE(),upds[4*maxn];
	int32_t tl[4*maxn],tr[4*maxn];
	inline void pushdown(int32_t v)
	{
		if(lazy[v]){
			apply(v*2,upds[v]);
			apply(v*2+1,upds[v]);
			lazy[v]=0;
			upds[v]=noop;
		}
	}
	inline void apply(int32_t v,UPDATE &val)
	{
		if(tl[v]!=tr[v]){
			lazy[v]=1;
			upds[v].combine(val,tl[v],tr[v]);
		}
		val.apply(t[v],tl[v],tr[v]);
	}
	template<typename T>
	void build(T &a, int32_t v, int32_t l, int32_t r) {
		tl[v]=l;
		tr[v]=r;
		if (l == r) {
			t[v]=a[l];
			return;
		} else {
			int32_t tm = (l + r) / 2;
			build(a, v*2, l, tm);
			build(a, v*2+1, tm+1, r);
			t[v].merge(t[v*2],t[v*2+1]);
		}
	}
	NODE query(int32_t v, int l, int r) {
		if (l > tr[v] || r < tl[v])
			return zero;
		if (l <= tl[v] && tr[v] <= r) {
			return t[v];
		}
		pushdown(v);
		NODE a,b,ans;
		a=query(v*2, l, r);
		b=query(v*2+1, l, r);
		ans.merge(a,b);
		return ans;
	}
	void rupd(int32_t v, int l, int r, UPDATE &val)
	{
		if(l > tr[v] || r < tl[v])
			return;
		if(l <= tl[v] && tr[v] <= r)
		{
			apply(v,val);
			return;
		}
		pushdown(v);
		rupd(v*2,l,r,val);
		rupd(v*2+1,l,r,val);
		t[v].merge(t[v*2],t[v*2+1]);
	}
	template<typename T>
	int descent_right(int l, T x, int32_t v, NODE &prev) {
		if (l > tr[v]) // node is completely out of range
			return len;
		if(l <= tl[v]){ // node is completely in range
			NODE cur;
			cur.merge(prev,t[v]);
			if (!cur.check(x)){ // go further right than this node
				swap(prev,cur); // merging this node's contribution
				return len;
			}
			if (tl[v]==tr[v]) {
				return tr[v];
			}
		}
		pushdown(v);
		int ans=descent_right(l, x, v*2, prev); // trying to find in left child
		if(ans!=len)return ans; // found in left child
		return descent_right(l, x, v*2+1, prev); // finding in right child
	}
	template<typename T>
	int descent_left(int r, T x, int32_t v, NODE &prev) {
		if (r < tl[v]) // node is completely out of range
			return -1;
		if(r >= tr[v]){ // node is completely in range
			NODE cur;
			cur.merge(t[v],prev);
			if (!cur.check(x)){ // go further left than this node
				swap(cur,prev); // merging this node's contribution
				return -1;
			}
			if (tl[v]==tr[v]) {
				return tl[v];
			}
		}
		pushdown(v);
		int ans=descent_left(r, x, v*2+1, prev); // trying to find in right child
		if(ans!=-1)return ans; // found in right child
		return descent_left(r, x, v*2, prev); // finding in left child
	}
	
	int len=maxn;
	void clear(){
		fill(t,t+4*len,zero);
		fill(lazy,lazy+4*len,false);
		fill(upds,upds+4*len,noop);
		built = false;
	}
	template<typename T>
	void build(T &a){
		build(a,1,0,len-1);
		built=true;
	}
	template<typename T>
	int descent_right(int l, T x){ // minimum r such that [l...r].check(x) == true, returns segtree.len if not found
		NODE prev=zero;
		return descent_right(l,x,1,prev);
	}
	template<typename T>
	int descent_left(int r, T x){ // maximum l such that [l...r].check(x) == true, returns -1 if not found
		NODE prev=zero;
		return descent_left(r,x,1,prev);
	}
	NODE query(int l,int r){
		if(!built)build(t);
		return query(1,l,r);
	}
	void rupd(int l,int r,UPDATE val){
		if(!built)build(t);
		rupd(1,l,r,val);
	}
};
